[["10-chapter-10.html", "Chapter 10 Polynomial regression, etc", " Chapter 10 Polynomial regression, etc This chapter collects some other useful techniques for addressing assumption violations in linear regression. One approach involves transforming the \\(X\\)-variable(s), which can be done in addition to (or instead of) transforming the \\(Y\\) variable. This approach is used to address violations of the assumption of linearity, and this chapter will cover two widely-used techniques Polynomial regression, which means raising \\(X\\)-variables to a power (e.g., \\(X^2\\) and \\(X^3\\)), and Piecewise or segmented regression, which involves using different regression lines over different ranges of a predictor. Both polynomial and piecewise regression are very useful in practice and lead to advanced topics like splines and semi-parametric regression. They also turn out to be special cases of interactions, so we have already covered a lot of the technical details in Chapter 6 – phew! We also consider how to deal with heteroskedasticity. The short version is that heteroskedasticity affects the standard errors of regression coefficients, and, consequently, the t-values, p-values, and confidence intervals. There are lots of ways to make standard errors robust to heteroskedasticity, and we will focus on one widely used procedure called heteroskedasticity-corrected (HC) standard errors. "],["10.1-polynomial-10.html", "10.1 Polynomial regression", " 10.1 Polynomial regression Polynomial regression means that we regress \\(Y\\) on a polynomial function of \\(X\\): \\[ \\widehat Y = b_0 + b_1 X_1 + b_2 X^2 + b_3 X^3 + ....\\] Your first thought might be, “doesn’t this contradict the assumption that regression is linear?” The answer here is a bit subtle. As with regular linear regression, the polynomial model is linear in the coefficients – we don’t raise the regression coefficients to a power (e.g., \\(b_1^2\\)), or multiply coefficients together (e.g, \\(b_1 \\times b_2\\)). This is the technical sense in which polynomial regression is still just linear regression, despite its name. Polynomial regression does use nonlinear functions of the predictor(s), but the model is agnostic to what you do with your data. The situation here is a lot like when we worked with interactions in Chapter 6. In order to model interactions, we computed the product of two predictors and entered the product into the model as a third predictor. Well, \\(X^2\\) is the product of a predictor with itself, so, in this sense, the quadratic term in a polynomial regression is just a special case of an interaction between two variables. Although we did not cover interactions among more than two variables in this course, they are computed in the same way – e.g., a “three-way” interaction is just the product of 3 predictors. Similarly, \\(X^3\\) is just the three-fold product of a variable with itself. In general, interactions and polynomial regression are related in the same way as multiplication and exponentiation. Although polynomial regression is formally similar to interactions, it is used for a different purpose. Interactions address how the relationship between two variables changes as a function of a third. Their inclusion in a model is usually motivated by a specific research question that is formulated before doing the data analysis (see Chapter 6). By contrast, polynomial regression is used to address a non-linear relationship between \\(Y\\) and \\(X\\), and is usually motivated by a preliminary examination of data that indicates the presence of such a relationship (e.g., a scatter plot of \\(Y\\) versus \\(X\\); a residual versus fitted plot). While it is possible to formulate research questions about polynomial terms in a regression model, this is not necessarily or even usually the case when polynomial regression is used – often its just used to address violations of the linearity assumption. 10.1.1 Recap of polynomials In general, a polynomial of degree \\(n\\) (i.e., highest power of \\(n\\)) produces a curve that can have up to \\(n-1\\) bends (minima and maxima). Some examples are illustrated in Figure 10.1 below. The (orange) linear function of \\(X\\) is a polynomial of degree 1 and has zero bends. The (green) quadratic function of \\(X\\) is a polynomial of degree 2 and has 1 bend (a minimum at \\(X = 0\\); this is also called a parabola). etc. Figure 10.1: Examples of Polynomials As we can see, this is a very flexible approach to capturing non-linear relationships between two variables. In fact, it can be too flexible! 10.1.2 Polynomials and curve fitting Figure 10.2 shows three different regression models fitted to the same bivariate data. In the left panel, a standard linear regression model is used, and we can see that the model does not capture the nonlinear (quadratic) trend in the data. The middle panel uses a quadratic model (i.e., includes \\(X^2\\) as a predictor, as well as \\(X\\)), and fits the data quite well. The right panel uses a 16-degree polynomial to fit the data. We can see that is has a higher R-squared than the quadratic model. But there is also something fishy about this model, don’t you agree? Before moving on please take a moment to write down your intuitions about what is going in the right-hand panel of Figure 10.2 and whether this model really is better than the one in the middle panel. I will ask you to share your thoughts in class. Figure 10.2: Polynomial Regression Examples To help formulate your intuitions, you might find it useful to consider the plots below. In these plots a second sample was drawn from the same population model, and the regression lines from Figure 10.2 were added to the plots. Note that the regression parameters were not re-estimated using the second data set. The model parameters from the first data set were used to produce the regression lines for the second data set. Figure 10.3: Polynomial Regression Examples (With New Data) 10.1.3 Interpreting the model As mentioned, polynomial terms are often added into a model as a way to address nonlinearity. When this is the case, the polynomial terms themselves are not of much substantive interest, and are just added to “patch up” the model after assumption checking. We saw an example of this in Section 7.3. In that example, a linear term and quadratic term were entered into the model in the same block of predictors. The R-squared was interpreted for the entire block, but the interpretation of the regression coefficient for the quadratic term was not addressed. This is a pretty common way of using polynomial regression – the polynomial terms are included so that the model assumptions (linearity) are met, but they are not necessarily interpreted beyond this. However, we can interpret the terms in a polynomial regression if we want to. This section addresses the interpretation of a quadratic regression, but a similar approach applies to models with higher-order terms. A classic example of a substantively interesting quadratic relationship is the Yerkes-Dodson law relating physiological arousal (i.e., stress) to task performance, represented in Figure 10.4. One way to interpret the law is in terms of the overall shape of the relationship. As stress goes up, so does performance – but only up to a point, after which more stress leads to a deterioration in performance. This exemplifies the basic interpretation of a quadratic relationship: A U-shaped curve corresponds to a positive regression coefficient on \\(X^2\\). An inverted-U-shaped curve corresponds to a negative regression coefficient on \\(X^2\\). Figure 10.4: Yerkes-Dodson Law (Source: Wikipedia) Beyond the overall shape of the relationship, we might also want to know what level of stress corresponds to the optimal level of performance – i.e., where the maximum of the curve is. This exemplifies a more complicated interpretation of a quadratic relationship, and it requires some calculus (see Section ??, which is optional). The main result is that for the quadratic regression model \\[ \\widehat Y = b_0 +b_1X + b_2X^2, \\] the value of \\(X\\) that corresponds to the maximum (or minumum) of the quadratic curve is \\[ X = \\frac{-b_1}{2 b_2} \\] Here is a hint for the following question: In the Yerkes-Dodson law, when the \\(X\\) variable is centered, the regression coefficient for the linear term is not statistically significant. Based on this discussion, please use both the “basic” and “more complicated” interpretation of a quadratic relationship to describe the Yerkes-Dodson Law. 10.1.4 Model building Up to this point we have discussed the interpretation of polynomials. Now we consider how to build polynomial regression models in practice. A typical model-building process for polynomial regression might proceed as follows. Enter the linear terms into the model and then examine a residual versus fitted plot. If there is evidence of non-linearity, look at the scatter plots between the outcome variable and each individual predictor to sort out which predictors are potentially causing the non-linearity. Add a quadratic term for a predictor of interest and examine whether there is a statistically significant increase in R-squared (See Section 7.2). If not, the quadratic term is not improving the model fit, so remove it from the model and try again. If so, re-check the residual versus fitted plot to see whether the linearity assumption is still problematic. Keep adding polynomial terms one at a time until the model assumptions looks reasonable. This overall approach is illustrated in the next section. However, there are a couple of important details to point out first. Just like with interactions, higher-order polynomial terms are often highly correlated with lower-order terms (e.g., \\(X\\) and \\(X^2\\) will be highly correlated if \\(X\\) takes on strictly positive values). Recall that if two predictors are highly correlated, this can affect their regression coefficients (see Section 4.4) as well as their standard errors (see Section 7.4). There are few things that can be done about this. Interpret \\(\\Delta R^2\\) values rather than the individual regression coefficients. This is the easiest thing to do. Center the predictors before computing higher order terms. This is the same approach we discussed for interactions (Section 6.3). Use “orthogonal polynomials” which ensure the different polynomial terms are uncorrelated. This is the default approach in R, but it definitely leans more towards curve-fitting than substantive interpretations of the polynomial terms. We can’t conclude that there is a quadratic relationship between two variables unless we have controlled for their linear relationship. As we just discussed, higher-order terms can be highly correlated with lower-order terms. Thus, higher-order terms will reflect their specific degree of curvature (e.g., quadratic) only if all lower-order (e.g., linear) terms are partialled out. In practice, this means that all lower-order terms should be included in the model in order for the higher-order terms to have a clear interpretation. Finally, a warning: Making good use of polynomial regression requires walking a fine line between curve fitting and parsimony (see Figure 10.2). Sometimes, adding polynomial terms can provide an elegant and intuitive interpretation of the relationship between two variables. But, if you find yourself adding more than a couple of polynomial terms into a model and still have unresolved issues with nonlinearity, it is probably best to consider another approach (such as piece-wise regression, see Section 10.3) "],["10.2-worked-example-10.html", "10.2 A worked example", " 10.2 A worked example In Section ?? we saw that applying a log-transform to the Wages.Rdata example addressed non-normality of the residuals but did not do much to address nonlinearity. The diagnostic plots for the log-linear regression of wages on education are presented below. # Load the data and take a look load(&quot;Wages.RData&quot;) attach(wages) # Create log transform of wage log_wage &lt;- log(wage + 1) # Regress it on educ mod1 &lt;- lm(log_wage ~ educ) # Check out model fit par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) abline(mod1) plot(mod1, 1, col = &quot;#4B9CD3&quot;) detach(wages) Because there is one prominent bend in our residual vs fitted plot of the log-linear model (at \\(\\hat Y \\approx 2.1\\)), let’s see if adding a quadratic term to the model can improve the model fit. The poly function in R makes it easy to do polynomial regression, without having to hard-code new variables like educ^2 into our dataset. This function automatically uses orthogonal (uncorrelated) polynomials, so we don’t have to worry about centering, either. The basic interpretation of the model coefficients in an orthogonal polynomial regression is the same as discussed in Section 10.1, but the “more complicated” interpretation of the model parameters is not straightforward. To find out more, use help(poly). The diagnostic plots for the log-linear model with a quadratic term included for education is shown below, along with the model summary. In the output, poly(educ, 2)n is the \\(n\\)-th degree term in the polynomial. attach(wages) mod2 &lt;- lm(log_wage ~ poly(educ, 2)) par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) # To plot the trend we need to we first need to order the data and the predicted values ... sort_educ &lt;- educ[order(educ)] sort_fitted&lt;- fitted(mod2)[order(educ)] points(sort_educ, sort_fitted, type = &quot;l&quot;) plot(mod2, 1, col = &quot;#4B9CD3&quot;) summary(mod2) ## ## Call: ## lm(formula = log_wage ~ poly(educ, 2)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.04722580 -0.38939401 0.01876853 0.31819618 1.14129265 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21987032 0.02112092 105.10293 &lt; 2e-16 *** ## poly(educ, 2)1 4.36133200 0.42241834 10.32467 &lt; 2e-16 *** ## poly(educ, 2)2 0.72365978 0.42241834 1.71314 0.087468 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4224183 on 397 degrees of freedom ## Multiple R-squared: 0.2162417, Adjusted R-squared: 0.2122933 ## F-statistic: 54.76687 on 2 and 397 DF, p-value: &lt; 2.2204e-16 detach(wages) What is your interpretation of the log-linear model with the quadratic term for education included? Does this address the non-linear relationship observed in the log-linear model? What would you do next? For your reference, the model with a cubic term for education is reported below. attach(wages) mod3 &lt;- lm(log_wage ~ poly(educ, 3)) par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) # To plot the trend we need to we first need to order the data and the predicted values ... sort_educ &lt;- educ[order(educ)] sort_fitted&lt;- fitted(mod3)[order(educ)] points(sort_educ, sort_fitted, type = &quot;l&quot;) plot(mod3, 1, col = &quot;#4B9CD3&quot;) summary(mod3) ## ## Call: ## lm(formula = log_wage ~ poly(educ, 3)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.03443437 -0.37335146 0.02030238 0.31072444 1.16122577 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21987032 0.02109873 105.21346 &lt; 2e-16 *** ## poly(educ, 3)1 4.36133200 0.42197458 10.33553 &lt; 2e-16 *** ## poly(educ, 3)2 0.72365978 0.42197458 1.71494 0.087139 . ## poly(educ, 3)3 -0.57168447 0.42197458 -1.35478 0.176259 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4219746 on 396 degrees of freedom ## Multiple R-squared: 0.2198577, Adjusted R-squared: 0.2139475 ## F-statistic: 37.19989 on 3 and 396 DF, p-value: &lt; 2.2204e-16 detach(wages) "],["10.3-piecewise-10.html", "10.3 Piecewise regression", " 10.3 Piecewise regression Piecewise or segmented regression is another approach to dealing with nonlinearity. Like polynomial regression, it is mathematically similar to interaction. Also like polynomial regression, it has a special interpretation and application that makes it practically distinct from interaction. In the simplest case, piecewise regression involves interacting a predictor variable with a binary re-coding of itself. To illustrate how the approach works, let’s again consider our wages and education example. The scatter plot of log-wages versus education is presented again below for reference. Figure 10.5: The Wages Example Consider the following reasoning about the example: For people with 12 or less years of education (i.e., who did not obtain post-secondary education) the apparent relationship with wage is quite weak. This seems plausible, because if a job doesn’t require a college degree, education probably isn’t a big factor in determining wages. For people with more than 12 years of education, the relationship with wage seems to be stronger. This also seems plausible: for jobs that require post secondary education, more education is usually associated with higher wages. To restate this as an interaction: the relationship between wage and education appears different for people who have a post-secondary education versus those who do not. To represent this reasoning visually we can modify Figure 10.5 as shown in Figure 10.6. This captures the basic idea behind piecewise regression – we have different regression lines over different ranges of the predictor, and the overall regression is piecewise or segmented. Figure 10.6: The wages example 10.3.1 The piecewise model We have reasoned that the relationship between wages and education might change as depending on whether people have a post-secondary education. We also noted that this sounds a lot like an interaction (because it is!), which is the basic approach we can use to create piecewise models. In order to run our basic piecewise regression, we need to create a dummy coded version of education that indicates whether the participant had more than 12 years education: \\[ \\text{educ12} = \\left\\{ \\begin{matrix} 1 &amp; \\text{if educ } &gt; 12\\\\ 0 &amp; \\text{if educ } \\leq 12 \\end{matrix} \\right. \\] The we just create an interaction model for educ and the dummy-coded indicator \\[ \\widehat Y = b_0 + b_1\\text{educ} + b_2\\text{educ12} + b_3 (\\text{educ} \\times \\text{educ12}) \\] Please take a moment to work out the interpretation of \\(b_1\\) and \\(b_3\\) in the model above, using the same approach as Section 6.3. (The interpretation of \\(b_0\\) and \\(b_2\\) is not very interesting but you can work them out too if you like.) Note that there are more complex approaches that will search for breakpoints, or can be used to smoothly connect polynomial regressions rather than linear regressions, etc. We won’t cover these more complex approaches here, but check out the following resource if you are interested and feel free to ask questions in class: https://rpubs.com/MarkusLoew/12164 10.3.2 Back to the example Below is the summary output for the piecewise model, as well as the diagnostic plots. You should be able to come up with a viable interpretation of the model output, based on What you know about interactions between a binary and continuous variable (Section 6.3 and above) What you know about the interpretation of regression coefficient log-linear models (Section ??) You can also use the emtrends functions to test the simple slopes (Section 6.4). Note that the intercept and main effect of the binary variable educ12 are not of much interest in this application. Please take a moment to write down your interpretation of the results, both the diagnostics and the parameter estimates, and be prepared to share your answers in class. ## ## Call: ## lm(formula = log(wage + 1) ~ educ * educ12) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.98100896 -0.36397940 0.02055116 0.30686623 1.10304679 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.78426162 0.23531296 7.58250 2.4349e-13 *** ## educ 0.01736235 0.02159493 0.80400 0.421879 ## educ12 -0.64255456 0.35572894 -1.80630 0.071630 . ## educ:educ12 0.06143626 0.02736939 2.24471 0.025338 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4202837 on 396 degrees of freedom ## Multiple R-squared: 0.2260973, Adjusted R-squared: 0.2202344 ## F-statistic: 38.56408 on 3 and 396 DF, p-value: &lt; 2.2204e-16 ## educ12 educ.trend SE df lower.CL upper.CL ## 0 0.0174 0.0216 396 -0.0251 0.0598 ## 1 0.0788 0.0168 396 0.0457 0.1119 ## ## Confidence level used: 0.95 Figure 10.7: The Wages Example "],["10.4-heteroskedasticity.html", "10.4 Heteroskedasticity", " 10.4 Heteroskedasticity Heteroskedasticity in linear regression, and corrections thereof, is a pretty big topic in the methodological literature (see Cite:fox). In this section we are just going to discuss one widely used solution, and how to implement it in R. In terms of our example, we can see in the residual versus fitted plot in Figure 10.7 that the residuals are less spread out for lower ranges of the fitted values (i.e., for \\(&lt;12\\) years of educ). As mentioned previously, heteroskedasticity will affect the standard errors of the regression coefficients, and consequently the t-tests, p-values, and confidence intervals. What this means is that the p-values for the regression coefficients will be wrong (usually too small) if the data are heteroskedastic but we mistakenly assume they are homoskedastic. Note that heteroskedasticity won’t affect the estimated values of the coefficients (i.e., the \\(\\widehat{b}\\)’s, and also doesn’t affect R-squared or its F-test. “Heteroskedasticity-corrected” (HC) standard errors do not assume the data homoskedastic. Technically, they can be used regardless of whether the homoskedasticity assumption is met. But, when the data are homoskedastic, the “regular” OLS standard errors are more efficient (i.e., precise). So, we usually don’t want to make the correction unless there is evidence of heteroskedasticity in the data. HC standard errors are also sometimes called heteroskedasticity-consistent, heteroskedastcicity-robust, or just robust. There are many different version of HC standard errors, but they are all equivalent with “large” samples. The simplest version is (see cite:Wooldridge) \\[ \\text{HCSE}_{\\hat{b}_j} = \\sqrt{\\frac{\\sum_{i=1}^N (X_{ij} - \\widehat{X}_{ij})^2 (Y_i-\\widehat{Y}_i)^2} {\\sum_{i=1}^N (X_{ij} - \\bar X_j)^2 (1 - R^2_j)}} \\tag{10.1} \\] In this equation, \\(\\widehat{X}_{ij}\\) is the predicted value that results from regressing \\(X_j\\) on the remaining \\(J-1\\) predictors. Comparing this equation to Equation (??), the main difference is that the \\((1 - R^2)\\) term for the \\(Y\\) variable is now replaced with a crossproduct of residuals for the \\(X_j\\) and \\(Y\\) variables. The equation is not very intuitive to look at, but the general idea is that it can be derived without assuming homoskedasticity. The procedure for using HC standard errors in R has two steps. First, we estimate the HC standard errors. Then, we use the HC standard errors to compute the correct t-tests and p-values (or confidence intervals). The following example shows how to implement HC standard errors in R, using the piecewise regression from Section 10.3. wages example The code is shown by default, because the main thing about this example is to see how it works in R – you already know how to interpret SEs, t-tests, p-values, etc. Your will need two packages installed – car and lmtest – for this example to work. # Make sure the required pacakges are installed # install.packages(&quot;car&quot;) # install.packages(&quot;lmtest&quot;) # Step 1. Use &quot;hccm&quot; to get the HC SEs for our piecewise model hcse &lt;- car::hccm(mod4) ## Step 2. Use &quot;coeftest&quot; to compute t-tests with the HC SEs lmtest::coeftest(mod4, hcse) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.784261622 0.188861068 9.44748 &lt; 2e-16 *** ## educ 0.017362354 0.017859441 0.97217 0.331561 ## educ12 -0.642554562 0.323850837 -1.98411 0.047934 * ## educ:educ12 0.061436260 0.024564997 2.50097 0.012789 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 This example is a bit unusual in the sense that the HC standard errors were actually a bit smaller than the regular OLS standard errors (see the output in Section ??) – more often the opposite is true. Nonetheless, you should have no problems interpreting the output above. "],["10.5-workbook-5.html", "10.5 Workbook", " 10.5 Workbook This section collects the questions asked in this chapter. We will discuss these questions in class. If you haven’t written down / thought about the answers to these questions before class, the lesson will not be very useful for you! So, please engage with each question by writing down one or more answers, asking clarifying questions, posing follow up questions, etc. Section 10.1 Please take a moment to write down your intuitions about what is going in the right-hand panel of the figure below and whether this model really is better than the one in the middle panel. I will ask you to share your thoughts in class.** Figure 10.8: Polynomial Regression Examples Please use both the “basic” and “more complicated” interpretation of a quadratic relationship to describe the Yerkes-Dodson Law. Figure 10.9: Yerkes-Dodson Law (Source: Wikipedia) Section 10.2 What is your interpretation of the log-linear model with the quadratic term for education included (below)? Does this address the non-linear relationship observed in the log-linear model? What would you do next? attach(wages) log_wage &lt;- log(wage + 1) mod2 &lt;- lm(log_wage ~ poly(educ, 2)) par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) # To plot the trend we need to we first need to order the data and the predicted values ... sort_educ &lt;- educ[order(educ)] sort_fitted&lt;- fitted(mod2)[order(educ)] points(sort_educ, sort_fitted, type = &quot;l&quot;) plot(mod2, 1, col = &quot;#4B9CD3&quot;) summary(mod2) ## ## Call: ## lm(formula = log_wage ~ poly(educ, 2)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.04722580 -0.38939401 0.01876853 0.31819618 1.14129265 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21987032 0.02112092 105.10293 &lt; 2e-16 *** ## poly(educ, 2)1 4.36133200 0.42241834 10.32467 &lt; 2e-16 *** ## poly(educ, 2)2 0.72365978 0.42241834 1.71314 0.087468 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4224183 on 397 degrees of freedom ## Multiple R-squared: 0.2162417, Adjusted R-squared: 0.2122933 ## F-statistic: 54.76687 on 2 and 397 DF, p-value: &lt; 2.2204e-16 detach(wages) Section 10.3 Please take a moment to work out the interpretation of \\(b_1\\) and \\(b_3\\) in the model below, using the same approach as Section 6.3. (The interpretation of \\(b_0\\) and \\(b_2\\) is not very interesting but you can work them out too if you like.) \\[ \\text{educ12} = \\left\\{ \\begin{matrix} 1 &amp; \\text{if educ } &gt; 12\\\\ 0 &amp; \\text{if educ } \\leq 12 \\end{matrix} \\right. \\] \\[ \\widehat Y = b_0 + b_1\\text{educ} + b_2\\text{educ12} + b_3 (\\text{educ} \\times \\text{educ12}) \\] The diagnostics plots and parameter estimates for the piecewise model are presented below. Please provide an overall interpretation of the results and be prepared to share your answers in class. summary(mod4) ## ## Call: ## lm(formula = log(wage + 1) ~ educ * educ12) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.98100896 -0.36397940 0.02055116 0.30686623 1.10304679 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.78426162 0.23531296 7.58250 2.4349e-13 *** ## educ 0.01736235 0.02159493 0.80400 0.421879 ## educ12 -0.64255456 0.35572894 -1.80630 0.071630 . ## educ:educ12 0.06143626 0.02736939 2.24471 0.025338 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4202837 on 396 degrees of freedom ## Multiple R-squared: 0.2260973, Adjusted R-squared: 0.2202344 ## F-statistic: 38.56408 on 3 and 396 DF, p-value: &lt; 2.2204e-16 emmeans::emtrends(mod4, specs = &quot;educ12&quot;, var = &quot;educ&quot;) ## educ12 educ.trend SE df lower.CL upper.CL ## 0 0.0174 0.0216 396 -0.0251 0.0598 ## 1 0.0788 0.0168 396 0.0457 0.1119 ## ## Confidence level used: 0.95 par(mfrow = c(1, 2)) plot(mod4, 1, col = &quot;#4B9CD3&quot;) plot(mod4, 2, col = &quot;#4B9CD3&quot;) "],["10.6-exercises-4.html", "10.6 Exercises", " 10.6 Exercises This section collects the code from Section 10.2 and Section 10.3 and your can refer to those sections for more details on interpretation. You’ll see that some of the plots below require a lot of fiddling about, especially for the piecewise regression model. We will cover some tricks and shortcuts for producing these types plots during the open lab sessions for Assignment 4. So don’t worry too much about the complicated-looking coded for the plots at this point! Let’s start with the “Vanella” log-linear model for the wages examples # Load the data and take a look load(&quot;Wages.RData&quot;) attach(wages) # Create log transform of wage log_wage &lt;- log(wage + 1) # Regress it on educ mod1 &lt;- lm(log_wage ~ educ) # Check out model fit par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) abline(mod1) plot(mod1, 1, col = &quot;#4B9CD3&quot;) Because there is one prominent bend in our residual vs fitted plot of the log-linear model (at \\(\\hat Y \\approx 2.1\\)), let’s see if adding a quadratic term to the model can improve the model fit. The poly function in R makes it easy to do polynomial regression, without having to hard-code new variables like educ^2 into our dataset. This function automatically uses orthogonal (uncorrelated) polynomials, so we don’t have to worry about centering, either. The basic interpretation of the model coefficients in an orthogonal polynomial regression is the same as discussed in Section 10.1, but the “more complicated” interpretation of the model parameters is not straightforward. To find out more, use help(poly). The diagnostic plots for the log-linear model with a quadratic term included for education is shown below, along with the model summary. In the output, poly(educ, 2)n is the \\(n\\)-th degree term in the polynomial. # Regress log_wage on a quadratic function of eduction mod2 &lt;- lm(log_wage ~ poly(educ, 2)) # Model output summary(mod2) ## ## Call: ## lm(formula = log_wage ~ poly(educ, 2)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.04722580 -0.38939401 0.01876853 0.31819618 1.14129265 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21987032 0.02112092 105.10293 &lt; 2e-16 *** ## poly(educ, 2)1 4.36133200 0.42241834 10.32467 &lt; 2e-16 *** ## poly(educ, 2)2 0.72365978 0.42241834 1.71314 0.087468 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4224183 on 397 degrees of freedom ## Multiple R-squared: 0.2162417, Adjusted R-squared: 0.2122933 ## F-statistic: 54.76687 on 2 and 397 DF, p-value: &lt; 2.2204e-16 # Diagnostic plots par(mfrow = c(1,2)) # scatter plot with trend plot(educ, log_wage, col = &quot;#4B9CD3&quot;) # order the data and the predicted values ... sort_educ &lt;- educ[order(educ)] sort_fitted &lt;- fitted(mod2)[order(educ)] points(sort_educ, sort_fitted, type = &quot;l&quot;) # residual versus fitted plot(mod2, 1, col = &quot;#4B9CD3&quot;) Using the same approach for the cubic model: mod3 &lt;- lm(log_wage ~ poly(educ, 3)) summary(mod3) ## ## Call: ## lm(formula = log_wage ~ poly(educ, 3)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.03443437 -0.37335146 0.02030238 0.31072444 1.16122577 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21987032 0.02109873 105.21346 &lt; 2e-16 *** ## poly(educ, 3)1 4.36133200 0.42197458 10.33553 &lt; 2e-16 *** ## poly(educ, 3)2 0.72365978 0.42197458 1.71494 0.087139 . ## poly(educ, 3)3 -0.57168447 0.42197458 -1.35478 0.176259 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4219746 on 396 degrees of freedom ## Multiple R-squared: 0.2198577, Adjusted R-squared: 0.2139475 ## F-statistic: 37.19989 on 3 and 396 DF, p-value: &lt; 2.2204e-16 # Same plots as above, reusing variable names here par(mfrow = c(1,2)) plot(educ, log_wage, col = &quot;#4B9CD3&quot;) sort_fitted &lt;- fitted(mod3)[order(educ)] points(sort_educ, sort_fitted, type = &quot;l&quot;) plot(mod3, 1, col = &quot;#4B9CD3&quot;) Moving on, let’s consider the piecewise model from Section 10.3 # Create a dummy variable indicating if education is at least 12 years or more educ12 &lt;- (educ &gt; 12)*1 # Interact the dummy with educ mod4 &lt;- lm(log(wage + 1) ~ educ*educ12) # The model output summary(mod4) ## ## Call: ## lm(formula = log(wage + 1) ~ educ * educ12) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.98100896 -0.36397940 0.02055116 0.30686623 1.10304679 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.78426162 0.23531296 7.58250 2.4349e-13 *** ## educ 0.01736235 0.02159493 0.80400 0.421879 ## educ12 -0.64255456 0.35572894 -1.80630 0.071630 . ## educ:educ12 0.06143626 0.02736939 2.24471 0.025338 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4202837 on 396 degrees of freedom ## Multiple R-squared: 0.2260973, Adjusted R-squared: 0.2202344 ## F-statistic: 38.56408 on 3 and 396 DF, p-value: &lt; 2.2204e-16 # The simple trends emmeans::emtrends(mod4, specs = &quot;educ12&quot;, var = &quot;educ&quot;) ## educ12 educ.trend SE df lower.CL upper.CL ## 0 0.0174 0.0216 396 -0.0251 0.0598 ## 1 0.0788 0.0168 396 0.0457 0.1119 ## ## Confidence level used: 0.95 # The diagnostic plots par(mfrow = c(1, 2)) plot(mod4, 1, col = &quot;#4B9CD3&quot;) plot(mod4, 2, col = &quot;#4B9CD3&quot;) Figure 10.10: The wages example We can still see some evidence of heteroskedasticity in the residual versus fitted plot, so the last step is to use heteroskedasticity-corrected standard errors to ensure we are making the right conclusions about statistical significance # Step 1. Use &quot;hccm&quot; to get the HC SEs for our piecewise model hcse &lt;- car::hccm(mod4) ## Step 2. Use &quot;coeftest&quot; to compute t-tests with the HC SEs lmtest::coeftest(mod4, hcse) ## ## t test of coefficients: ## ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.784261622 0.188861068 9.44748 &lt; 2e-16 *** ## educ 0.017362354 0.017859441 0.97217 0.331561 ## educ12 -0.642554562 0.323850837 -1.98411 0.047934 * ## educ:educ12 0.061436260 0.024564997 2.50097 0.012789 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The next bit is optional. It shows how to produce the piecewise regression plot, which takes quite a bit of messing about with R…Let me know if you find an easier way to do this (in base R). # Building the piecewise regression plot -- yeeesh # Add fitted values to dataset wages$fitted &lt;- fitted(mod4) # Sort data on educ wages &lt;- wages[order(educ), ] # Plot par(mfrow = c(1, 1)) plot(educ, log(wage + 1), col = &quot;#4B9CD3&quot;) # Change color for the points with educ ≤ 12 with(subset(wages, educ &lt;= 12), points(educ, log(wage + 1))) # Plot the predicted values for educ &gt; 12 with(subset(wages, educ &gt; 12), lines(educ, fitted, col = &quot;#4B9CD3&quot;)) # Plot the predicted values for educ ≤ 12 with(subset(wages, educ &lt;= 12), lines(educ, fitted)) detach(wages) "]]
